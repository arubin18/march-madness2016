data$opp_fg_percent = 100*data$opp_fgm / data$opp_fga
data$ft_percent = 100*data$ftm / data$fta # free throw percentage
data$opp_ft_percent = 100*data$opp_ftm / data$opp_fta
data$fg3_percent = 100*data$fgm3 / data$fga3 # three point percentage
data$opp_fg3_percent = 100*data$opp_fgm3 / data$opp_fga3
### offensive efficiency
data$total_possessions = data$games * (data$fga - data$or + data$to + 0.44*data$fta) # total possessions
data$total_points = data$games * data$ppg # total points
data$ppp = data$total_points / data$total_possessions # points scored by possession
data$opp_total_possessions = data$opp_games * (data$opp_fga - data$opp_or + data$opp_to + 0.44*data$opp_fta)
data$opp_total_points = data$opp_games * data$opp_ppg
data$opp_ppp = data$opp_total_points / data$opp_total_possessions
### defensive efficiency
data$total_points_allowed = data$games * data$points_allowed # total points allowed
data$dppp = data$total_points_allowed / data$total_possessions # points allowed by possession
data$opp_total_points_allowed = data$games * data$opp_points_allowed
data$opp_dppp = data$opp_total_points_allowed / data$opp_total_possessions
### effective field goal percentage
data$efg = 100*(data$fgm + 0.5*data$fgm3) / data$fga
data$opp_efg = 100*(data$opp_fgm + 0.5*data$opp_fgm3) / data$opp_fga
### true shooting percentage
data$ts = 100*0.5*data$ppg / (data$fga + 0.44*data$fta)
data$opp_ts = 100*0.5*data$opp_ppg / (data$opp_fga + 0.44*data$opp_fta)
### win percentage
data$win_percent = 100*(data$wins / data$games)
data$opp_win_percent = 100*(data$opp_wins / data$opp_games)
### possessions per game
data$possessions_per_game = data$total_possessions / data$games
data$opp_possessions_per_game = data$opp_total_possessions / data$opp_games
attach(data)
### organize the data
data2 <- data.frame(data[,1:3], seed, data[,4:20], rpg, fg_percent, ft_percent, fg3_percent, total_possessions
, total_points, ppp, total_points_allowed, dppp, efg, ts, win_percent
, possessions_per_game, opp_team, opp_seed, data[,22:38]
, opp_rpg, opp_fg_percent, opp_ft_percent, opp_fg3_percent, opp_total_possessions
, opp_total_points, opp_ppp, opp_total_points_allowed, opp_dppp, opp_efg
, opp_ts, opp_win_percent, opp_possessions_per_game, won)
### exporting data
matchups = data2[data2$season != 2016,] # training data
matchups <- arrange(matchups)
testing = data2[data2$season == 2016,] # what we're going to predict = testing data
write.csv(testing, "~/march_madness/datasets/testing_data.csv", row.names=FALSE)
testing <- arrange(testing)
testing_labels = testing$won
testing$won <- NULL # remove labels
# rounds for the tournament
# round 1 is the only round for testing data
round1 = matchups[matchups$daynum == 136 | matchups$daynum == 137,]
round1$daynum <- NULL
round1.c = mean_centering(round1)
round1_test = testing[testing$daynum == 136 | testing$daynum == 137,]
round1_test$daynum <- NULL
round1_test.c = mean_centering(round1_test, response = FALSE, one_year = TRUE)
write.csv(round1, "~/march_madness/datasets/round1.csv", row.names=FALSE)
write.csv(round1.c, "~/march_madness/datasets/round1_cent.csv", row.names=FALSE)
write.csv(round1_test, "~/march_madness/datasets/round1_test.csv", row.names=FALSE)
write.csv(round1_test.c, "~/march_madness/datasets/round1_test_cent.csv", row.names=FALSE)
round2 = matchups[matchups$daynum == 138 | matchups$daynum == 139,]
round2$daynum <- NULL
round2.c = mean_centering(round2)
write.csv(round2, "~/march_madness/datasets/round2.csv", row.names=FALSE)
write.csv(round2.c, "~/march_madness/datasets/round2_cent.csv", row.names=FALSE)
round3 = matchups[matchups$daynum == 143 | matchups$daynum == 144,]
round3$daynum <- NULL
round3.c = mean_centering(round3)
write.csv(round3, "~/march_madness/datasets/round3.csv", row.names=FALSE)
write.csv(round3.c, "~/march_madness/datasets/round3_cent.csv", row.names=FALSE)
round4 = matchups[matchups$daynum == 145 | matchups$daynum == 146,]
round4$daynum <- NULL
round4.c = mean_centering(round4)
write.csv(round4, "~/march_madness/datasets/round4.csv", row.names=FALSE)
write.csv(round4.c, "~/march_madness/datasets/round4_cent.csv", row.names=FALSE)
round5 = matchups[matchups$daynum == 152,]
round5$daynum <- NULL
round5.c = mean_centering(round5)
write.csv(round5, "~/march_madness/datasets/round5.csv", row.names=FALSE)
write.csv(round5.c, "~/march_madness/datasets/round5_cent.csv", row.names=FALSE)
round6 = matchups[matchups$daynum == 154,]
round6$daynum <- NULL
round6.c = mean_centering(round6)
write.csv(round6, "~/march_madness/datasets/round6.csv", row.names=FALSE)
write.csv(round6.c, "~/march_madness/datasets/round6_cent.csv", row.names=FALSE)
View(round1.c)
View(round1.c)
warnings()
round1
View(round1)
View(round1)
View(matchups)
View(matchups)
mean_centering(round1)
years = unique(round1$season)
round1.c = mean_centering(round1)
s = data.c[data.c$season==years[1],] # season 1
round1.c = mean_centering(round1)
View(round1)
View(round1)
test <- round1
years = unique(test$season)
s = test[test$season==years[1],] # season 1
View(s)
View(s)
n = nrow(test)
m = mrow(test)
m = nrow(test)
test$team = as.numeric(rep(1, m))
test$opp_team = as.numeric(rep(1,m))
test$seed = as.numeric(rep(1,m))
test$opp_seed = as.numeric(rep(1,m))
s[,4:n] = center_scale(s[,4:n])
center_scale <- function(x) {
scale(x, scale = FALSE)
}
s[,4:n] = center_scale(s[,4:n])
n = ncol(test)
s[,4:n] = center_scale(s[,4:n])
test$team = as.numeric(rep(1, m))
test$opp_team = as.numeric(rep(1,m))
test$seed = as.numeric(rep(1,m))
test$opp_seed = as.numeric(rep(1,m))
s = test[test$season==years[1],] # season 1
s[,4:n] = center_scale(s[,4:n])
warnings
warnings()
a = center_scale(s[,4:n])
View(a)
View(a)
a = center_scale(s[,4:n])
View(s)
View(s)
test <- round1
n = ncol(test)
m = nrow(test)
test$team = as.numeric(rep(1, m))
test$opp_team = as.numeric(rep(1,m))
test$seed = as.numeric(rep(1,m))
test$opp_seed = as.numeric(rep(1,m))
years = unique(test$season)
s = test[test$season==years[1],] # season 1
View(s)
View(s)
a = center_scale(s[,4:n])
View(a)
View(a)
for (i in 2:length(years)) {
test = data.c[data.c$season==years[i],]
test[,4:n] = center_scale(test[,4:n])
s = rbind(s, test)
}
s = cbind(s[,1:3], a)
s = test[test$season==years[1],] # season 1
a = center_scale(s[,4:n])
s = cbind(s[,1:3], a)
View(s)
View(s)
s = test[0,] # season 1
for (i in 1:length(years)) {
v = test[test$season==years[i],]
a = center_scale(v[,4:n])
v = cbind(v[,1:3], a)
s = rbindlist(list(s, v))
}
View(s)
View(s)
mean_centering <- function(data, response=TRUE, one_year=TRUE) {
center_scale <- function(x) {
scale(x, scale = FALSE)
}
data.c <- data
if (response) {
data.c$won <- NULL # there is a response variable
}
m = nrow(data.c)
n = ncol(data.c)
data.c$team = as.numeric(rep(1, m))
data.c$opp_team = as.numeric(rep(1,m))
data.c$seed = as.numeric(rep(1,m))
data.c$opp_seed = as.numeric(rep(1,m))
# more than one season
if (! one_year) {
years = unique(matchups$season)
s = data.c[0,] # column names
for (i in 1:length(years)) {
test = data.c[data.c$season==years[i],]
cs = center_scale(test[,4:n])
test = cbind(test[,1:3], cs)
s = rbindlist(list(s, test))
}
data.c = s
}
else {
cs = center_scale(data.c[,4:n])
data.c = cbind(data.c[,1:3], cs)
}
data.c$team = data$team
data.c$opp_team = data$opp_team
data.c$seed = data$seed
data.c$opp_seed = data$opp_seed
if (response) {
r = data$won # response
data.c$won = r
return (data.c)
} else {
return (data.c)
}
}
rm(list=ls())
source("~/march_madness/mean_centering.R")
source("~/march_madness/arrange.R")
library(readr)
data <- read_csv("~/march_madness/results.csv")
teams <- read_csv("~/march_madness/teams.csv")
for (i in 1:nrow(data)) {
data$team[i] = teams[teams$Team_Id == toString(data$team[i]),]$Team_Name
data$opp_team[i] = teams[teams$Team_Id == toString(data$opp_team[i]),]$Team_Name
}
data$rpg = data$or + data$dr # rebounds per game
data$opp_rpg = data$opp_or + data$opp_dr
data$fg_percent = 100*data$fgm / data$fga # field goal percentage
data$opp_fg_percent = 100*data$opp_fgm / data$opp_fga
data$ft_percent = 100*data$ftm / data$fta # free throw percentage
data$opp_ft_percent = 100*data$opp_ftm / data$opp_fta
data$fg3_percent = 100*data$fgm3 / data$fga3 # three point percentage
data$opp_fg3_percent = 100*data$opp_fgm3 / data$opp_fga3
### offensive efficiency
data$total_possessions = data$games * (data$fga - data$or + data$to + 0.44*data$fta) # total possessions
data$total_points = data$games * data$ppg # total points
data$ppp = data$total_points / data$total_possessions # points scored by possession
data$opp_total_possessions = data$opp_games * (data$opp_fga - data$opp_or + data$opp_to + 0.44*data$opp_fta)
data$opp_total_points = data$opp_games * data$opp_ppg
data$opp_ppp = data$opp_total_points / data$opp_total_possessions
### defensive efficiency
data$total_points_allowed = data$games * data$points_allowed # total points allowed
data$dppp = data$total_points_allowed / data$total_possessions # points allowed by possession
data$opp_total_points_allowed = data$games * data$opp_points_allowed
data$opp_dppp = data$opp_total_points_allowed / data$opp_total_possessions
### effective field goal percentage
data$efg = 100*(data$fgm + 0.5*data$fgm3) / data$fga
data$opp_efg = 100*(data$opp_fgm + 0.5*data$opp_fgm3) / data$opp_fga
### true shooting percentage
data$ts = 100*0.5*data$ppg / (data$fga + 0.44*data$fta)
data$opp_ts = 100*0.5*data$opp_ppg / (data$opp_fga + 0.44*data$opp_fta)
### win percentage
data$win_percent = 100*(data$wins / data$games)
data$opp_win_percent = 100*(data$opp_wins / data$opp_games)
### possessions per game
data$possessions_per_game = data$total_possessions / data$games
data$opp_possessions_per_game = data$opp_total_possessions / data$opp_games
attach(data)
### organize the data
data2 <- data.frame(data[,1:3], seed, data[,4:20], rpg, fg_percent, ft_percent, fg3_percent, total_possessions
, total_points, ppp, total_points_allowed, dppp, efg, ts, win_percent
, possessions_per_game, opp_team, opp_seed, data[,22:38]
, opp_rpg, opp_fg_percent, opp_ft_percent, opp_fg3_percent, opp_total_possessions
, opp_total_points, opp_ppp, opp_total_points_allowed, opp_dppp, opp_efg
, opp_ts, opp_win_percent, opp_possessions_per_game, won)
### exporting data
matchups = data2[data2$season != 2016,] # training data
matchups <- arrange(matchups)
testing = data2[data2$season == 2016,] # what we're going to predict = testing data
write.csv(testing, "~/march_madness/datasets/testing_data.csv", row.names=FALSE)
testing <- arrange(testing)
testing_labels = testing$won
testing$won <- NULL # remove labels
# rounds for the tournament
# round 1 is the only round for testing data
round1 = matchups[matchups$daynum == 136 | matchups$daynum == 137,]
round1$daynum <- NULL
round1.c = mean_centering(round1)
View(round1.c)
View(round1.c)
rm(list=ls())
source("~/march_madness/mean_centering.R")
source("~/march_madness/arrange.R")
library(readr)
data <- read_csv("~/march_madness/results.csv")
teams <- read_csv("~/march_madness/teams.csv")
for (i in 1:nrow(data)) {
data$team[i] = teams[teams$Team_Id == toString(data$team[i]),]$Team_Name
data$opp_team[i] = teams[teams$Team_Id == toString(data$opp_team[i]),]$Team_Name
}
data$rpg = data$or + data$dr # rebounds per game
data$opp_rpg = data$opp_or + data$opp_dr
data$fg_percent = 100*data$fgm / data$fga # field goal percentage
data$opp_fg_percent = 100*data$opp_fgm / data$opp_fga
data$ft_percent = 100*data$ftm / data$fta # free throw percentage
data$opp_ft_percent = 100*data$opp_ftm / data$opp_fta
data$fg3_percent = 100*data$fgm3 / data$fga3 # three point percentage
data$opp_fg3_percent = 100*data$opp_fgm3 / data$opp_fga3
### offensive efficiency
data$total_possessions = data$games * (data$fga - data$or + data$to + 0.44*data$fta) # total possessions
data$total_points = data$games * data$ppg # total points
data$ppp = data$total_points / data$total_possessions # points scored by possession
data$opp_total_possessions = data$opp_games * (data$opp_fga - data$opp_or + data$opp_to + 0.44*data$opp_fta)
data$opp_total_points = data$opp_games * data$opp_ppg
data$opp_ppp = data$opp_total_points / data$opp_total_possessions
### defensive efficiency
data$total_points_allowed = data$games * data$points_allowed # total points allowed
data$dppp = data$total_points_allowed / data$total_possessions # points allowed by possession
data$opp_total_points_allowed = data$games * data$opp_points_allowed
data$opp_dppp = data$opp_total_points_allowed / data$opp_total_possessions
### effective field goal percentage
data$efg = 100*(data$fgm + 0.5*data$fgm3) / data$fga
data$opp_efg = 100*(data$opp_fgm + 0.5*data$opp_fgm3) / data$opp_fga
### true shooting percentage
data$ts = 100*0.5*data$ppg / (data$fga + 0.44*data$fta)
data$opp_ts = 100*0.5*data$opp_ppg / (data$opp_fga + 0.44*data$opp_fta)
### win percentage
data$win_percent = 100*(data$wins / data$games)
data$opp_win_percent = 100*(data$opp_wins / data$opp_games)
### possessions per game
data$possessions_per_game = data$total_possessions / data$games
data$opp_possessions_per_game = data$opp_total_possessions / data$opp_games
attach(data)
### organize the data
data2 <- data.frame(data[,1:3], seed, data[,4:20], rpg, fg_percent, ft_percent, fg3_percent, total_possessions
, total_points, ppp, total_points_allowed, dppp, efg, ts, win_percent
, possessions_per_game, opp_team, opp_seed, data[,22:38]
, opp_rpg, opp_fg_percent, opp_ft_percent, opp_fg3_percent, opp_total_possessions
, opp_total_points, opp_ppp, opp_total_points_allowed, opp_dppp, opp_efg
, opp_ts, opp_win_percent, opp_possessions_per_game, won)
### exporting data
matchups = data2[data2$season != 2016,] # training data
matchups <- arrange(matchups)
testing = data2[data2$season == 2016,] # what we're going to predict = testing data
write.csv(testing, "~/march_madness/datasets/testing_data.csv", row.names=FALSE)
testing <- arrange(testing)
testing_labels = testing$won
testing$won <- NULL # remove labels
# rounds for the tournament
# round 1 is the only round for testing data
round1 = matchups[matchups$daynum == 136 | matchups$daynum == 137,]
round1$daynum <- NULL
round1.c = mean_centering(round1)
round1_test = testing[testing$daynum == 136 | testing$daynum == 137,]
round1_test$daynum <- NULL
round1_test.c = mean_centering(round1_test, response = FALSE, one_year = TRUE)
write.csv(round1, "~/march_madness/datasets/round1.csv", row.names=FALSE)
write.csv(round1.c, "~/march_madness/datasets/round1_cent.csv", row.names=FALSE)
write.csv(round1_test, "~/march_madness/datasets/round1_test.csv", row.names=FALSE)
write.csv(round1_test.c, "~/march_madness/datasets/round1_test_cent.csv", row.names=FALSE)
round2 = matchups[matchups$daynum == 138 | matchups$daynum == 139,]
round2$daynum <- NULL
round2.c = mean_centering(round2)
write.csv(round2, "~/march_madness/datasets/round2.csv", row.names=FALSE)
write.csv(round2.c, "~/march_madness/datasets/round2_cent.csv", row.names=FALSE)
round3 = matchups[matchups$daynum == 143 | matchups$daynum == 144,]
round3$daynum <- NULL
round3.c = mean_centering(round3)
write.csv(round3, "~/march_madness/datasets/round3.csv", row.names=FALSE)
write.csv(round3.c, "~/march_madness/datasets/round3_cent.csv", row.names=FALSE)
round4 = matchups[matchups$daynum == 145 | matchups$daynum == 146,]
round4$daynum <- NULL
round4.c = mean_centering(round4)
write.csv(round4, "~/march_madness/datasets/round4.csv", row.names=FALSE)
write.csv(round4.c, "~/march_madness/datasets/round4_cent.csv", row.names=FALSE)
round5 = matchups[matchups$daynum == 152,]
round5$daynum <- NULL
round5.c = mean_centering(round5)
write.csv(round5, "~/march_madness/datasets/round5.csv", row.names=FALSE)
write.csv(round5.c, "~/march_madness/datasets/round5_cent.csv", row.names=FALSE)
round6 = matchups[matchups$daynum == 154,]
round6$daynum <- NULL
round6.c = mean_centering(round6)
write.csv(round6, "~/march_madness/datasets/round6.csv", row.names=FALSE)
write.csv(round6.c, "~/march_madness/datasets/round6_cent.csv", row.names=FALSE)
View(round6)
View(round6)
reg1 = glm(won ~ dppp + opp_dppp + blk + opp_blk + ts + opp_ts
+ win_percent + opp_win_percent + stl + opp_stl + ppp + opp_ppp
, data=matchups.c, family=binomial)
library(arm)
library(pROC)
rm(list=ls())
source("~/march_madness/get_winners.R")
source("~/march_madness/mean_centering.R")
library(readr)
matchups <- read_csv("~/march_madness/datasets/round1.csv") # training data
round1 <- read_csv("~/march_madness/datasets/round1_test.csv") # testing data
### correlation matrix c
cor_relation <- round(cor(matchups), digits=3)
cor_relation[abs(cor_relation) < 0.70] <- NA
write.csv(cor_relation, "~/march_madness/datasets/correlations.csv")
# ts has correlation with efg - don't include efg
# win percent has correlation with wins - don't include wins
# efg has correlation with fg percent
# seed has negative correlation with opp seed
# total points is correlated with total possessions - don't include total points
# dppp changes many p-values and coefficients for other variables especially rpg
# so does oppp
# total points also
# significant multicolinearity with fg percent and ts
reg1 = glm(won ~ dppp + opp_dppp + blk + opp_blk + ts + opp_ts
+ win_percent + opp_win_percent + stl + opp_stl + ppp + opp_ppp
, data=matchups.c, family=binomial)
matchups.c <- mean_centering(matchups)
reg1 = glm(won ~ dppp + opp_dppp + blk + opp_blk + ts + opp_ts
+ win_percent + opp_win_percent + stl + opp_stl + ppp + opp_ppp
, data=matchups.c, family=binomial)
summary(reg1)
reg1 = glm(won ~ ., family=binomial)
reg1 = glm(won ~., data=matchups.c, family=binomial)
summary(reg1)
reg2 = glm(won ~ seed
, data=matchups.c, family=binomial)
reg1 = glm(won ~ dppp + opp_dppp + blk + opp_blk + ts + opp_ts
+ win_percent + opp_win_percent + stl + opp_stl + ppp + opp_ppp
, data=matchups.c, family=binomial)
summary(reg1)
reg1 = glm(won ~ seed
, data=matchups.c, family=binomial)
summary(reg1)
reg1 = glm(won ~ seed + opp_seed
, data=matchups.c, family=binomial)
summary(reg1)
cor_relation <- round(cor(matchups), digits=3)
cor_relation[abs(cor_relation) < 0.70] <- NA
write.csv(cor_relation, "~/march_madness/datasets/correlations.csv")
cor_relation <- round(cor(as.numeric(matchups)), digits=3)
cor_relation <- round(cor(as.numeric(as.factor(matchups)), digits=3)
cor_relation[abs(cor_relation) < 0.70] <- NA
write.csv(cor_relation, "~/march_madness/datasets/correlations.csv")
matchups.c <- mean_centering(matchups)
### too much multicolinearity and need a more simplistic model
reg6 = stepAIC(reg1,direction="both",k=log(dim(matchups.c)[1]))
summary(reg6)
reg7 = update(reg6, ~. + blk)
summary(reg7) # opp ppp p-value decreased a lot
anova(reg6, reg7, test="Chisq") # term is significant - let's keep it
roc(matchups$won, fitted(reg7), plot=T, legacy.axes=T)
rawresid7 = matchups$won - fitted(reg7)
binnedplot(x=matchups.c$opp_dppp, y=rawresid7)
binnedplot(x=matchups.c$win_percent, y=rawresid7)
binnedplot(x=matchups.c$ppp, y=rawresid7)
binnedplot(x=matchups.c$opp_ppp, y=rawresid7) # consider transformation
binnedplot(x=matchups.c$blk, y=rawresid7)
matchups$log_opp_ppp = log(matchups$opp_ppp)
matchups.c <- mean_centering(matchups)
reg8 = update(reg7, ~. - opp_ppp + log_opp_ppp)
summary(reg7)
summary(reg8) # opp ppp p-value did not change
rawresid8 = matchups$won - fitted(reg8)
binnedplot(x=matchups.c$log_opp_ppp, y=rawresid8) # residuals look the same
matchups$opp_ppp3 = matchups$opp_ppp^3
matchups.c <- mean_centering(matchups)
reg8 = update(reg7, ~. + opp_ppp3)
summary(reg8)
rawresid8 = matchups$won - fitted(reg8)
binnedplot(x=matchups.c$opp_ppp2, y=rawresid8) # residuals look the same
# transformations for opp ppp did not work
# try interactions for reg7
reg8 = glm(won ~ blk * (opp_dppp + win_percent + ppp + opp_ppp), data=matchups.c, family=binomial)
summary(reg8)
# let's test if the whole group of interactions are significant
anova(reg7, reg8, test="Chisq") # it is
# drop interaction with blk and opp dppp
reg8a = glm(won ~ opp_dppp+ blk * (win_percent + ppp + opp_ppp), data=matchups.c, family=binomial)
summary(reg8a)
anova(reg8a, reg8, test="Chisq") # not significant
reg8b = glm(won ~ opp_dppp + opp_ppp + blk * (win_percent + ppp), data=matchups.c, family=binomial)
summary(reg8b) # the two interaction terms have significant p-values
### predictions
predictions = predict(reg, round1.c, type="response")
labels = round(predictions)
round1P <- round1
round1P$won <- labels
write.csv(round1P, "~/march_madness/datasets/round1_predictions.csv", row.names=FALSE)
winners <- get_winners(round1P)
write.csv(winners, "~/march_madness/datasets/round1_winners.csv", row.names=FALSE)
cor_relation <- round(cor(as.numeric(as.factor(matchups)), digits=3)
cor_relation <- round(cor(matchups), digits=3)
test_correlations <- matchups
test_correlations$team <- NULL
test_correlations$opp_team <- NULL
cor_relation <- round(cor(test_correlations), digits=3)
View(cor_relation)
View(cor_relation)
cor_relation[abs(cor_relation) < 0.70] <- NA
write.csv(cor_relation, "~/march_madness/datasets/correlations.csv")
library(arm)
library(pROC)
rm(list=ls())
source("~/march_madness/get_winners.R")
source("~/march_madness/mean_centering.R")
library(readr)
matchups <- read_csv("~/march_madness/datasets/round1.csv") # training data
round1 <- read_csv("~/march_madness/datasets/round1_test.csv") # testing data
### correlation matrix c
test_correlations <- matchups
test_correlations$team <- NULL
test_correlations$opp_team <- NULL
cor_relation <- round(cor(test_correlations), digits=3)
cor_relation[abs(cor_relation) < 0.70] <- NA
write.csv(cor_relation, "~/march_madness/datasets/correlations.csv")
cor_relation > .7
reg = glc(won~.,data=matchups.c, family=binomial)
reg = glm(won~.,data=matchups.c, family=binomial)
matchups.c <- mean_centering(matchups)
reg = glm(won~.,data=matchups.c, family=binomial)
reg1 = stepAIC(reg,direction="both",k=log(dim(matchups.c)[1]))
warnings()
reg = glm(won~-seed-opp_seed.,data=matchups.c, family=binomial)
View(matchups.c)
View(matchups.c)
matchups.c$opp_seed
history install.packages(
)
history n
history install
history install.packages(
)
history a
